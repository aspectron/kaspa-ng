name: Tests

on: [push, pull_request]

jobs:
  check:
    name: Checks
    runs-on: ubuntu-latest
    steps:

      - name: Install desktop dependencies
        run: |
          sudo apt-get update
          sudo apt install -y libglib2.0-dev libatk1.0-dev libgtk-3-dev

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo check
        run: cargo check --tests --workspace --benches

  test:
    name: Tests
    # runs-on: ${{ matrix.os }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      # matrix:
        # os: [ ubuntu-latest, macos-latest, windows-latest ]
    steps:
      # Clean unnecessary files to save disk space
      - name: clean unnecessary files to save space
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/sudo apt/sources.list.d
          sudo apt -y autoremove --purge
          sudo apt -y autoclean
          sudo apt clean
          rm --recursive --force "$AGENT_TOOLSDIRECTORY"
          df -h          

          # remove large packages manually (all but llvm)
          sudo apt-get remove -y '^aspnetcore-.*' || echo "::warning::The command [sudo apt-get remove -y '^aspnetcore-.*'] failed to complete successfully. Proceeding..."
          sudo apt-get remove -y '^dotnet-.*' --fix-missing || echo "::warning::The command [sudo apt-get remove -y '^dotnet-.*' --fix-missing] failed to complete successfully. Proceeding..."
          sudo apt-get remove -y 'php.*' --fix-missing || echo "::warning::The command [sudo apt-get remove -y 'php.*' --fix-missing] failed to complete successfully. Proceeding..."
          sudo apt-get remove -y '^mongodb-.*' --fix-missing || echo "::warning::The command [sudo apt-get remove -y '^mongodb-.*' --fix-missing] failed to complete successfully. Proceeding..."
          sudo apt-get remove -y '^mysql-.*' --fix-missing || echo "::warning::The command [sudo apt-get remove -y '^mysql-.*' --fix-missing] failed to complete successfully. Proceeding..."
          sudo apt-get remove -y azure-cli google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri --fix-missing || echo "::warning::The command [sudo apt-get remove -y azure-cli google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri --fix-missing] failed to complete successfully. Proceeding..."
          sudo apt-get remove -y google-cloud-sdk --fix-missing || echo "::debug::The command [sudo apt-get remove -y google-cloud-sdk --fix-missing] failed to complete successfully. Proceeding..."
          sudo apt-get remove -y google-cloud-cli --fix-missing || echo "::debug::The command [sudo apt-get remove -y google-cloud-cli --fix-missing] failed to complete successfully. Proceeding..."
          sudo apt-get autoremove -y || echo "::warning::The command [sudo apt-get autoremove -y] failed to complete successfully. Proceeding..."
          sudo apt-get clean || echo "::warning::The command [sudo apt-get clean] failed to complete successfully. Proceeding..."
          df -h          

      # Free up disk space on Ubuntu
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # This might remove tools that are actually needed, if set to "true" but frees about 6 GB
          tool-cache: false

          # large packages, except llvm, are removed manually during the previous step
          # see: https://github.com/jlumbroso/free-disk-space/issues/6
          # TODO: use the discussed whitelist feature when available
          large-packages: false

          swap-storage: true

      - name: Install desktop dependencies
        run: |
          sudo apt-get update
          sudo apt install -y libglib2.0-dev libatk1.0-dev libgtk-3-dev

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Fix CRLF on Windows
        if: runner.os == 'Windows'
        run: git config --global core.autocrlf false

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Set up cache
        uses: Swatinem/rust-cache@v2
      
      - name: Install cargo-nextest
        run: cargo install cargo-nextest

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo build
        run: cargo build --bin kaspa-ng --release --workspace --all --tests --benches

      - name: Run cargo test regular features
        run: cargo nextest run --release --workspace

      - name: Run cargo doc tests
        run: cargo test --doc --release --workspace

  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:

      - name: Install desktop dependencies
        run: |
          sudo apt-get update
          sudo apt install -y libglib2.0-dev libatk1.0-dev libgtk-3-dev

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - name: Run cargo clippy
        run: cargo clippy --workspace --all-targets --tests --benches -- -D warnings

  wasm32:
    name: WASM32 Builds
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install llvm
        id: install_llvm
        continue-on-error: true
        run: |
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          sudo apt-get install -y clang-15 lldb-15 lld-15 clangd-15 clang-tidy-15 clang-format-15 clang-tools-15 llvm-15-dev lld-15 lldb-15 llvm-15-tools libomp-15-dev libc++-15-dev libc++abi-15-dev libclang-common-15-dev libclang-15-dev libclang-cpp15-dev libunwind-15-dev
          # Make Clang 15 default
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/lib/llvm-15/bin/clang++ 100
          sudo update-alternatives --install /usr/bin/clang clang /usr/lib/llvm-15/bin/clang 100
          sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/lib/llvm-15/bin/clang-format 100
          sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/lib/llvm-15/bin/clang-tidy 100
          sudo update-alternatives --install /usr/bin/run-clang-tidy run-clang-tidy /usr/lib/llvm-15/bin/run-clang-tidy 100
          # Alias cc to clang
          sudo update-alternatives --install /usr/bin/cc cc /usr/lib/llvm-15/bin/clang 0
          sudo update-alternatives --install /usr/bin/c++ c++ /usr/lib/llvm-15/bin/clang++ 0

      - name: Install gcc-multilib
        # gcc-multilib allows clang to find gnu libraries properly
        run: |
          sudo apt-get update
          sudo apt install -y gcc-multilib

      - name: Install apt prerequisites
        if: ${{ runner.os == 'Linux' }}
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: libglib2.0-dev libatk1.0-dev libgtk-3-dev
          version: 1.0

      - name: Install stable toolchain
        if: steps.install_llvm.outcome == 'success' && steps.install_llvm.conclusion == 'success'
        uses: dtolnay/rust-toolchain@stable

      - name: Cargo install wasm-pack and trunk
        run: |
          cargo install wasm-pack
          cargo install trunk

      - name: Add wasm32 target
        run: rustup target add wasm32-unknown-unknown

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # - name: Run cargo check for wasm32 target
      #   run: cargo clippy --target wasm32-unknown-unknown

      - name: Build Web App
        run: |
          trunk build --release

      - name: Build Chrome Browser Extension
        run: |
          rm -rf ./dist-chrome
          mkdir ./dist-chrome
          mkdir ./dist-chrome/icons
          # copy resources
          cp -r ./core/resources/icons ./dist-chrome/
          cp ./extensions/chrome/style.css ./dist-chrome/
          cp ./extensions/chrome/manifest.json ./dist-chrome/
          cp ./extensions/chrome/popup.html ./dist-chrome/
          cp ./extensions/chrome/popup.js ./dist-chrome/
          cp ./extensions/chrome/background.js ./dist-chrome/
          # build
          wasm-pack build --target web --out-name kaspa-ng --out-dir ../../dist-chrome ./extensions/chrome

  build-release:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    name: Building, ${{ matrix.os }}
    steps:

      - name: Fix CRLF on Windows
        if: runner.os == 'Windows'
        run: git config --global core.autocrlf false

      - name: Install apt prerequisites
        if: ${{ runner.os == 'Linux' }}
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: libglib2.0-dev libatk1.0-dev libgtk-3-dev
          version: 1.0

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup Environment
        shell: bash
        run: echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build on Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir kaspa-ng-${{ env.SHORT_SHA }}-windows-x64 || true
          cargo build --bin kaspa-ng --release
          cp target/release/kaspa-ng.exe kaspa-ng-${{ env.SHORT_SHA }}-windows-x64/kaspa-ng.exe
          cargo build --bin kaspa-ng --profile console --features console
          cp target/release/kaspa-ng.exe kaspa-ng-${{ env.SHORT_SHA }}-windows-x64/kaspa-ng-console.exe
          archive="kaspa-ng-${{ env.SHORT_SHA }}-windows-x64/kaspa-ng-${{ env.SHORT_SHA }}-windows-x64.zip"
          powershell "Compress-Archive kaspa-ng-${{ env.SHORT_SHA }}-windows-x64/* \"${archive}\""

      - name: Upload Windows build to GitHub 
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with: 
          name: kaspa-ng-${{ env.SHORT_SHA }}-windows-x64.zip
          path: kaspa-ng-${{ env.SHORT_SHA }}-windows-x64/kaspa-ng-${{ env.SHORT_SHA }}-windows-x64.zip

      - name: Build on MacOS
        if: runner.os == 'macOS'
        run: |
          mkdir kaspa-ng-${{ env.SHORT_SHA }}-macos-arm64 || true
          cargo build --bin kaspa-ng --release
          cp target/release/kaspa-ng kaspa-ng-${{ env.SHORT_SHA }}-macos-arm64/
          archive="kaspa-ng-${{ env.SHORT_SHA }}-macos-arm64/kaspa-ng-${{ env.SHORT_SHA }}-macos-arm64.zip"
          zip -r "${archive}" ./kaspa-ng-${{ env.SHORT_SHA }}-macos-arm64/*

      - name: Upload MacOS build to GitHub 
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with: 
          name: kaspa-ng-${{ env.SHORT_SHA }}-macos-arm64.zip
          path: kaspa-ng-${{ env.SHORT_SHA }}-macos-arm64/kaspa-ng-${{ env.SHORT_SHA }}-macos-arm64.zip

      - name: Build on Linux
        if: runner.os == 'Linux'
        run: |
          mkdir kaspa-ng-${{ env.SHORT_SHA }}-linux-gnu-amd64 || true
          cargo build --bin kaspa-ng --release
          mkdir -p .debpkg/usr/bin
          cp target/release/kaspa-ng .debpkg/usr/bin/
          cp target/release/kaspa-ng kaspa-ng-${{ env.SHORT_SHA }}-linux-gnu-amd64/
          archive="kaspa-ng-${{ env.SHORT_SHA }}-linux-gnu-amd64/kaspa-ng-${{ env.SHORT_SHA }}-linux-gnu-amd64.zip"
          zip -r "${archive}" ./kaspa-ng-${{ env.SHORT_SHA }}-linux-gnu-amd64/*

      - name: Upload Linux build to GitHub 
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with: 
          name: kaspa-ng-${{ env.SHORT_SHA }}-linux-gnu-amd64.zip
          path: kaspa-ng-${{ env.SHORT_SHA }}-linux-gnu-amd64/kaspa-ng-${{ env.SHORT_SHA }}-linux-gnu-amd64.zip

      - name: Package Debian Release
        if: runner.os == 'Linux'
        id: package_debian
        uses: jiro4989/build-deb-action@v3
        with:
          package: kaspa-ng
          package_root: .debpkg
          maintainer: ASPECTRON
          version: "refs/tags/v0.0.1" # refs/tags/v*.*.*
          arch: 'amd64'
          depends: 'libglib2.0-0, libatk1.0-0, libgtk-3-0'
          desc: 'Kaspa NG desktop p2p node and wallet'
      - name: Install and Test Debian Package
        if: runner.os == 'Linux'
        run: |
          sudo dpkg -i "${{ steps.package_debian.outputs.file_name }}"
          kaspa-ng --version || echo "Failed to execute kaspa-ng --version"
      # - name: Package Details
      #   if: runner.os == 'Linux'
      #   run: |
      #     ls -la
      #     dpkg-deb -I ${{ steps.package_debian.outputs.file_name }}
      #     dpkg-deb -c ${{ steps.package_debian.outputs.file_name }}
